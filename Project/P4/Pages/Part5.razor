@page "/5"
@inject IJSRuntime JS;
@inject IJSRuntime JsRuntime;
@using Blazor.Extensions;
@using Blazor.Extensions.Canvas.Canvas2D ;
@using System.Drawing

<div id="theCanvas" style="position: fixed; opacity: 1; background-color: White; width: 100%; height: 100%">
    <BECanvas Width="3000" Height="4000" @ref="_canvasReference"></BECanvas>
</div>

@code
{
    private Canvas2DContext _context;

    protected BECanvasComponent _canvasReference;
    public double RecX = 0 ;
    public double RecY = 0 ;
    double secondsPassed = 0;
    double oldTimeStamp = 0;
    double movingSpeed = 50;
    double timePassed  = 0;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if(!firstRender)
            return;
        _context = await this._canvasReference.CreateCanvas2DAsync();
        await JsRuntime.InvokeAsync<object>("initGame", DotNetObjectReference.Create(this));
    }
    private async ValueTask DrawAsync()
    {
        await _context.ClearRectAsync(0,0,_canvasReference.Width, _canvasReference.Height);
        await _context.SetFillStyleAsync("Red");
        await _context.FillRectAsync(RecX , RecY , 100 , 75);
    }
    private async ValueTask UpdateAsync(double secondsPassed)
    {
        timePassed += secondsPassed ;
        RecX = await easeInOutQuint(timePassed, 50, 500, 1.5);
        RecY = await  easeLinear(timePassed, 50, 250, 1.5);
    }

    public async Task<double> easeInOutQuint(double t, double b , double c , double d)
    {
        if ((t /= d / 2) < 1) 
            return c / 2 * t * t * t * t * t + b;
        return c / 2 * ((t -= 2) * t * t * t * t + 2) + b;
    }
    public async Task<double> easeLinear(double t, double b , double c , double d)
    {
        return c * t / d + b;
    }
    [JSInvokable]
    public async ValueTask GameLoop(double timestamp)
    {
        secondsPassed = (timestamp - oldTimeStamp) / 1000;
        oldTimeStamp = timestamp;
        secondsPassed = Math.Min(secondsPassed,0.1);
        await DrawAsync();
        await UpdateAsync(secondsPassed);

    }


}